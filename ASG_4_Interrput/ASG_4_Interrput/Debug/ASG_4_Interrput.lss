
ASG_4_Interrput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000558  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000005cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb6  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000727  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087d  00000000  00000000  00001afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  0000237c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000548  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078a  00000000  00000000  00002ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000323e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  74:	0c 94 aa 02 	jmp	0x554	; 0x554 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC,PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD,PinId);
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	08 f0       	brcs	.+2      	; 0x82 <DIO_setPinDirection+0x6>
  80:	72 c0       	rjmp	.+228    	; 0x166 <DIO_setPinDirection+0xea>
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0xc>
  86:	6f c0       	rjmp	.+222    	; 0x166 <DIO_setPinDirection+0xea>
  88:	42 30       	cpi	r20, 0x02	; 2
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0x12>
  8c:	6c c0       	rjmp	.+216    	; 0x166 <DIO_setPinDirection+0xea>
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	01 f1       	breq	.+64     	; 0xd2 <DIO_setPinDirection+0x56>
  92:	30 f0       	brcs	.+12     	; 0xa0 <DIO_setPinDirection+0x24>
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	b1 f1       	breq	.+108    	; 0x104 <DIO_setPinDirection+0x88>
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_setPinDirection+0x22>
  9c:	4c c0       	rjmp	.+152    	; 0x136 <DIO_setPinDirection+0xba>
  9e:	08 95       	ret
  a0:	41 30       	cpi	r20, 0x01	; 1
  a2:	59 f4       	brne	.+22     	; 0xba <DIO_setPinDirection+0x3e>
  a4:	2a b3       	in	r18, 0x1a	; 26
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_setPinDirection+0x34>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_setPinDirection+0x30>
  b4:	82 2b       	or	r24, r18
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret
  ba:	2a b3       	in	r18, 0x1a	; 26
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_setPinDirection+0x4a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_setPinDirection+0x46>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	59 f4       	brne	.+22     	; 0xec <DIO_setPinDirection+0x70>
  d6:	27 b3       	in	r18, 0x17	; 23
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_setPinDirection+0x66>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_setPinDirection+0x62>
  e6:	82 2b       	or	r24, r18
  e8:	87 bb       	out	0x17, r24	; 23
  ea:	08 95       	ret
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setPinDirection+0x7c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setPinDirection+0x78>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	59 f4       	brne	.+22     	; 0x11e <DIO_setPinDirection+0xa2>
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_setPinDirection+0x98>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_setPinDirection+0x94>
 118:	82 2b       	or	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0xae>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0xaa>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f4       	brne	.+22     	; 0x150 <DIO_setPinDirection+0xd4>
 13a:	21 b3       	in	r18, 0x11	; 17
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_setPinDirection+0xca>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_setPinDirection+0xc6>
 14a:	82 2b       	or	r24, r18
 14c:	81 bb       	out	0x11, r24	; 17
 14e:	08 95       	ret
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDirection+0xe0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDirection+0xdc>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret

00000168 <DIO_setPinValue>:
 168:	84 30       	cpi	r24, 0x04	; 4
 16a:	08 f0       	brcs	.+2      	; 0x16e <DIO_setPinValue+0x6>
 16c:	72 c0       	rjmp	.+228    	; 0x252 <DIO_setPinValue+0xea>
 16e:	68 30       	cpi	r22, 0x08	; 8
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_setPinValue+0xc>
 172:	6f c0       	rjmp	.+222    	; 0x252 <DIO_setPinValue+0xea>
 174:	42 30       	cpi	r20, 0x02	; 2
 176:	08 f0       	brcs	.+2      	; 0x17a <DIO_setPinValue+0x12>
 178:	6c c0       	rjmp	.+216    	; 0x252 <DIO_setPinValue+0xea>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	01 f1       	breq	.+64     	; 0x1be <DIO_setPinValue+0x56>
 17e:	30 f0       	brcs	.+12     	; 0x18c <DIO_setPinValue+0x24>
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	b1 f1       	breq	.+108    	; 0x1f0 <DIO_setPinValue+0x88>
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	09 f4       	brne	.+2      	; 0x18a <DIO_setPinValue+0x22>
 188:	4c c0       	rjmp	.+152    	; 0x222 <DIO_setPinValue+0xba>
 18a:	08 95       	ret
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	59 f4       	brne	.+22     	; 0x1a6 <DIO_setPinValue+0x3e>
 190:	2b b3       	in	r18, 0x1b	; 27
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_setPinValue+0x34>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_setPinValue+0x30>
 1a0:	82 2b       	or	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	08 95       	ret
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_setPinValue+0x4a>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_setPinValue+0x46>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	08 95       	ret
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <DIO_setPinValue+0x70>
 1c2:	28 b3       	in	r18, 0x18	; 24
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_setPinValue+0x66>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_setPinValue+0x62>
 1d2:	82 2b       	or	r24, r18
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	08 95       	ret
 1d8:	28 b3       	in	r18, 0x18	; 24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinValue+0x7c>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinValue+0x78>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	88 bb       	out	0x18, r24	; 24
 1ee:	08 95       	ret
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	59 f4       	brne	.+22     	; 0x20a <DIO_setPinValue+0xa2>
 1f4:	25 b3       	in	r18, 0x15	; 21
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_setPinValue+0x98>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_setPinValue+0x94>
 204:	82 2b       	or	r24, r18
 206:	85 bb       	out	0x15, r24	; 21
 208:	08 95       	ret
 20a:	25 b3       	in	r18, 0x15	; 21
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_setPinValue+0xae>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_setPinValue+0xaa>
 21a:	80 95       	com	r24
 21c:	82 23       	and	r24, r18
 21e:	85 bb       	out	0x15, r24	; 21
 220:	08 95       	ret
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	59 f4       	brne	.+22     	; 0x23c <DIO_setPinValue+0xd4>
 226:	22 b3       	in	r18, 0x12	; 18
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_setPinValue+0xca>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_setPinValue+0xc6>
 236:	82 2b       	or	r24, r18
 238:	82 bb       	out	0x12, r24	; 18
 23a:	08 95       	ret
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_setPinValue+0xe0>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_setPinValue+0xdc>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	82 bb       	out	0x12, r24	; 18
 252:	08 95       	ret

00000254 <DIO_getPinValue>:
}


void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
	if((PortId<=3) && (PinId<=7) && (PinValue!= NULL))
 254:	84 30       	cpi	r24, 0x04	; 4
 256:	c0 f5       	brcc	.+112    	; 0x2c8 <DIO_getPinValue+0x74>
 258:	68 30       	cpi	r22, 0x08	; 8
 25a:	b0 f5       	brcc	.+108    	; 0x2c8 <DIO_getPinValue+0x74>
 25c:	41 15       	cp	r20, r1
 25e:	51 05       	cpc	r21, r1
 260:	99 f1       	breq	.+102    	; 0x2c8 <DIO_getPinValue+0x74>
	{
		switch(PortId)
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	89 f0       	breq	.+34     	; 0x288 <DIO_getPinValue+0x34>
 266:	28 f0       	brcs	.+10     	; 0x272 <DIO_getPinValue+0x1e>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	c9 f0       	breq	.+50     	; 0x29e <DIO_getPinValue+0x4a>
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	11 f1       	breq	.+68     	; 0x2b4 <DIO_getPinValue+0x60>
 270:	08 95       	ret
		{
			case DIO_PORTA:
			*PinValue = GET_BIT(PINA,PinId);
 272:	89 b3       	in	r24, 0x19	; 25
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_getPinValue+0x28>
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_getPinValue+0x24>
 280:	81 70       	andi	r24, 0x01	; 1
 282:	fa 01       	movw	r30, r20
 284:	80 83       	st	Z, r24
			break;
 286:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue = GET_BIT(PINB,PinId);
 288:	86 b3       	in	r24, 0x16	; 22
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_getPinValue+0x3e>
 28e:	95 95       	asr	r25
 290:	87 95       	ror	r24
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_getPinValue+0x3a>
 296:	81 70       	andi	r24, 0x01	; 1
 298:	fa 01       	movw	r30, r20
 29a:	80 83       	st	Z, r24
			break;
 29c:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue = GET_BIT(PINC,PinId);
 29e:	83 b3       	in	r24, 0x13	; 19
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_getPinValue+0x54>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_getPinValue+0x50>
 2ac:	81 70       	andi	r24, 0x01	; 1
 2ae:	fa 01       	movw	r30, r20
 2b0:	80 83       	st	Z, r24
			break;
 2b2:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue = GET_BIT(PIND,PinId);
 2b4:	80 b3       	in	r24, 0x10	; 16
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_getPinValue+0x6a>
 2ba:	95 95       	asr	r25
 2bc:	87 95       	ror	r24
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_getPinValue+0x66>
 2c2:	81 70       	andi	r24, 0x01	; 1
 2c4:	fa 01       	movw	r30, r20
 2c6:	80 83       	st	Z, r24
 2c8:	08 95       	ret

000002ca <EXTI_enable>:
#include "EXTI_private.h"


void EXTI_enable(EXTI_source interruptSource, EXTI_trigger interruptTriggerEdge)
{
	switch(interruptSource)
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	61 f1       	breq	.+88     	; 0x326 <EXTI_enable+0x5c>
 2ce:	20 f0       	brcs	.+8      	; 0x2d8 <EXTI_enable+0xe>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <EXTI_enable+0xc>
 2d4:	4f c0       	rjmp	.+158    	; 0x374 <EXTI_enable+0xaa>
 2d6:	08 95       	ret
	{
		case EXTI_INT0:
		switch(interruptTriggerEdge)
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	69 f0       	breq	.+26     	; 0x2f6 <EXTI_enable+0x2c>
 2dc:	28 f0       	brcs	.+10     	; 0x2e8 <EXTI_enable+0x1e>
 2de:	62 30       	cpi	r22, 0x02	; 2
 2e0:	89 f0       	breq	.+34     	; 0x304 <EXTI_enable+0x3a>
 2e2:	63 30       	cpi	r22, 0x03	; 3
 2e4:	b1 f0       	breq	.+44     	; 0x312 <EXTI_enable+0x48>
 2e6:	1b c0       	rjmp	.+54     	; 0x31e <EXTI_enable+0x54>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
 2e8:	85 b7       	in	r24, 0x35	; 53
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 2ee:	85 b7       	in	r24, 0x35	; 53
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	85 bf       	out	0x35, r24	; 53
			break;
 2f4:	14 c0       	rjmp	.+40     	; 0x31e <EXTI_enable+0x54>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
 2f6:	85 b7       	in	r24, 0x35	; 53
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 2fc:	85 b7       	in	r24, 0x35	; 53
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	85 bf       	out	0x35, r24	; 53
			break;
 302:	0d c0       	rjmp	.+26     	; 0x31e <EXTI_enable+0x54>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
 304:	85 b7       	in	r24, 0x35	; 53
 306:	8e 7f       	andi	r24, 0xFE	; 254
 308:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
 30a:	85 b7       	in	r24, 0x35	; 53
 30c:	8d 7f       	andi	r24, 0xFD	; 253
 30e:	85 bf       	out	0x35, r24	; 53
			break;
 310:	06 c0       	rjmp	.+12     	; 0x31e <EXTI_enable+0x54>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
 312:	85 b7       	in	r24, 0x35	; 53
 314:	81 60       	ori	r24, 0x01	; 1
 316:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
 318:	85 b7       	in	r24, 0x35	; 53
 31a:	8d 7f       	andi	r24, 0xFD	; 253
 31c:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT0); //Enable INT0
 31e:	8b b7       	in	r24, 0x3b	; 59
 320:	80 64       	ori	r24, 0x40	; 64
 322:	8b bf       	out	0x3b, r24	; 59
		break;
 324:	08 95       	ret
		
		case EXTI_INT1:
		switch(interruptTriggerEdge)
 326:	61 30       	cpi	r22, 0x01	; 1
 328:	69 f0       	breq	.+26     	; 0x344 <EXTI_enable+0x7a>
 32a:	28 f0       	brcs	.+10     	; 0x336 <EXTI_enable+0x6c>
 32c:	62 30       	cpi	r22, 0x02	; 2
 32e:	89 f0       	breq	.+34     	; 0x352 <EXTI_enable+0x88>
 330:	63 30       	cpi	r22, 0x03	; 3
 332:	b1 f0       	breq	.+44     	; 0x360 <EXTI_enable+0x96>
 334:	1b c0       	rjmp	.+54     	; 0x36c <EXTI_enable+0xa2>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
 336:	85 b7       	in	r24, 0x35	; 53
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 33c:	85 b7       	in	r24, 0x35	; 53
 33e:	88 60       	ori	r24, 0x08	; 8
 340:	85 bf       	out	0x35, r24	; 53
			break;
 342:	14 c0       	rjmp	.+40     	; 0x36c <EXTI_enable+0xa2>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
 344:	85 b7       	in	r24, 0x35	; 53
 346:	8b 7f       	andi	r24, 0xFB	; 251
 348:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
 34a:	85 b7       	in	r24, 0x35	; 53
 34c:	88 60       	ori	r24, 0x08	; 8
 34e:	85 bf       	out	0x35, r24	; 53
			break;
 350:	0d c0       	rjmp	.+26     	; 0x36c <EXTI_enable+0xa2>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
 352:	85 b7       	in	r24, 0x35	; 53
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 358:	85 b7       	in	r24, 0x35	; 53
 35a:	87 7f       	andi	r24, 0xF7	; 247
 35c:	85 bf       	out	0x35, r24	; 53
			break;
 35e:	06 c0       	rjmp	.+12     	; 0x36c <EXTI_enable+0xa2>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10);
 360:	85 b7       	in	r24, 0x35	; 53
 362:	84 60       	ori	r24, 0x04	; 4
 364:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
 366:	85 b7       	in	r24, 0x35	; 53
 368:	87 7f       	andi	r24, 0xF7	; 247
 36a:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT1); //Enable INT1
 36c:	8b b7       	in	r24, 0x3b	; 59
 36e:	80 68       	ori	r24, 0x80	; 128
 370:	8b bf       	out	0x3b, r24	; 59
		break;
 372:	08 95       	ret
		
		case EXTI_INT2:
		switch(interruptTriggerEdge)
 374:	66 23       	and	r22, r22
 376:	19 f0       	breq	.+6      	; 0x37e <EXTI_enable+0xb4>
 378:	61 30       	cpi	r22, 0x01	; 1
 37a:	29 f0       	breq	.+10     	; 0x386 <EXTI_enable+0xbc>
 37c:	07 c0       	rjmp	.+14     	; 0x38c <EXTI_enable+0xc2>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
 37e:	84 b7       	in	r24, 0x34	; 52
 380:	80 64       	ori	r24, 0x40	; 64
 382:	84 bf       	out	0x34, r24	; 52
			break;
 384:	03 c0       	rjmp	.+6      	; 0x38c <EXTI_enable+0xc2>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
 386:	84 b7       	in	r24, 0x34	; 52
 388:	8f 7b       	andi	r24, 0xBF	; 191
 38a:	84 bf       	out	0x34, r24	; 52
			break;
		}
		SET_BIT(GICR,INT2); //Enable INT2
 38c:	8b b7       	in	r24, 0x3b	; 59
 38e:	80 62       	ori	r24, 0x20	; 32
 390:	8b bf       	out	0x3b, r24	; 59
 392:	08 95       	ret

00000394 <GI_enable>:
#include "GI_private.h"


void GI_enable(void)
{
	SET_BIT(SREG,I);
 394:	8f b7       	in	r24, 0x3f	; 63
 396:	80 68       	ori	r24, 0x80	; 128
 398:	8f bf       	out	0x3f, r24	; 63
 39a:	08 95       	ret

0000039c <main>:
u8 LED0_value , LED1_value, LED2_value;

int main(void)
{
	// LEDS
	DIO_setPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT); //LED0 >> O/P
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT); //LED1 >> O/P
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	67 e0       	ldi	r22, 0x07	; 7
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_OUTPUT); //LED2 >> O/P
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
	
	
	// Buttons
	DIO_setPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);  //Button 2 INT0 >> I/P
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_INPUT);  //Button 1 INT2 >> I/P
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
	
	GI_enable();
 3ce:	0e 94 ca 01 	call	0x394	; 0x394 <GI_enable>
	
	EXTI_enable(EXTI_INT0,EXTI_RISING_EDGE);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 65 01 	call	0x2ca	; 0x2ca <EXTI_enable>
	EXTI_enable(EXTI_INT2,EXTI_RISING_EDGE);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	0e 94 65 01 	call	0x2ca	; 0x2ca <EXTI_enable>
	while (1)
	{
			DIO_getPinValue(DIO_PORTC,DIO_PIN2, &LED0_value);
 3e2:	42 e6       	ldi	r20, 0x62	; 98
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_getPinValue>
			DIO_getPinValue(DIO_PORTC,DIO_PIN7, &LED1_value);
 3ee:	41 e6       	ldi	r20, 0x61	; 97
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	67 e0       	ldi	r22, 0x07	; 7
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_getPinValue>
			DIO_getPinValue(DIO_PORTD,DIO_PIN3, &LED2_value);
 3fa:	40 e6       	ldi	r20, 0x60	; 96
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_getPinValue>
 406:	ed cf       	rjmp	.-38     	; 0x3e2 <main+0x46>

00000408 <__vector_1>:
}

// for INT0
void __vector_1(void) __attribute__ ((signal));
void __vector_1(void)
{
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	2f 93       	push	r18
 414:	3f 93       	push	r19
 416:	4f 93       	push	r20
 418:	5f 93       	push	r21
 41a:	6f 93       	push	r22
 41c:	7f 93       	push	r23
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	af 93       	push	r26
 424:	bf 93       	push	r27
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31

	if (LED0_value==0 && LED1_value==0 && LED2_value==0)
 42a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <LED0_value>
 42e:	81 11       	cpse	r24, r1
 430:	0e c0       	rjmp	.+28     	; 0x44e <__vector_1+0x46>
 432:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <LED1_value>
 436:	91 11       	cpse	r25, r1
 438:	0a c0       	rjmp	.+20     	; 0x44e <__vector_1+0x46>
 43a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 43e:	91 11       	cpse	r25, r1
 440:	06 c0       	rjmp	.+12     	; 0x44e <__vector_1+0x46>
	{
		DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH); // LED0 on
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	62 e0       	ldi	r22, 0x02	; 2
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
 44c:	1f c0       	rjmp	.+62     	; 0x48c <__vector_1+0x84>
	}
	else if(LED0_value==1 && LED1_value==0 && LED2_value==0)
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	71 f4       	brne	.+28     	; 0x46e <__vector_1+0x66>
 452:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <LED1_value>
 456:	91 11       	cpse	r25, r1
 458:	0a c0       	rjmp	.+20     	; 0x46e <__vector_1+0x66>
 45a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 45e:	91 11       	cpse	r25, r1
 460:	06 c0       	rjmp	.+12     	; 0x46e <__vector_1+0x66>
	{
		DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_HIGH); // LED1 on
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	67 e0       	ldi	r22, 0x07	; 7
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
 46c:	0f c0       	rjmp	.+30     	; 0x48c <__vector_1+0x84>
	}
	else if(LED0_value==1 && LED1_value==1 && LED2_value==0)
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	69 f4       	brne	.+26     	; 0x48c <__vector_1+0x84>
 472:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <LED1_value>
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	49 f4       	brne	.+18     	; 0x48c <__vector_1+0x84>
 47a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 47e:	81 11       	cpse	r24, r1
 480:	05 c0       	rjmp	.+10     	; 0x48c <__vector_1+0x84>
	{
		DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH); // LED2 on
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
	}
	
}
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <__vector_3>:

// for INT2
void __vector_3(void) __attribute__ ((signal));
void __vector_3(void)
{
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
		if (LED0_value==1 && LED1_value==1 && LED2_value==1)
 4d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <LED0_value>
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	71 f4       	brne	.+28     	; 0x4f4 <__vector_3+0x46>
 4d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <LED1_value>
 4dc:	91 30       	cpi	r25, 0x01	; 1
 4de:	51 f4       	brne	.+20     	; 0x4f4 <__vector_3+0x46>
 4e0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4e4:	91 30       	cpi	r25, 0x01	; 1
 4e6:	31 f4       	brne	.+12     	; 0x4f4 <__vector_3+0x46>
		{
			DIO_setPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW); // LED2 off
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
 4f2:	1f c0       	rjmp	.+62     	; 0x532 <__vector_3+0x84>
		}
		else if(LED0_value==1 && LED1_value==1 && LED2_value==0)
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	71 f4       	brne	.+28     	; 0x514 <__vector_3+0x66>
 4f8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <LED1_value>
 4fc:	91 30       	cpi	r25, 0x01	; 1
 4fe:	51 f4       	brne	.+20     	; 0x514 <__vector_3+0x66>
 500:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 504:	91 11       	cpse	r25, r1
 506:	06 c0       	rjmp	.+12     	; 0x514 <__vector_3+0x66>
		{
			DIO_setPinValue(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW); // LED1 off
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	67 e0       	ldi	r22, 0x07	; 7
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
 512:	0f c0       	rjmp	.+30     	; 0x532 <__vector_3+0x84>
		}
		else if(LED0_value==1 && LED1_value==0 && LED2_value==0)
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	69 f4       	brne	.+26     	; 0x532 <__vector_3+0x84>
 518:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <LED1_value>
 51c:	81 11       	cpse	r24, r1
 51e:	09 c0       	rjmp	.+18     	; 0x532 <__vector_3+0x84>
 520:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 524:	81 11       	cpse	r24, r1
 526:	05 c0       	rjmp	.+10     	; 0x532 <__vector_3+0x84>
		{
			DIO_setPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW); // LED0 off
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	62 e0       	ldi	r22, 0x02	; 2
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	0e 94 b4 00 	call	0x168	; 0x168 <DIO_setPinValue>
		}
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	1f 90       	pop	r1
 552:	18 95       	reti

00000554 <_exit>:
 554:	f8 94       	cli

00000556 <__stop_program>:
 556:	ff cf       	rjmp	.-2      	; 0x556 <__stop_program>
